EC2 Instance must have:
    Must add a aws profile for pull ecr, use s3, secret manager
    Security group open port 22 (SSH), 80 (FE), 8080 (BE)
    ROLE (May be not need)
FE Must define the server host url in the env.
RDS must allow access from port 3306. (Can config to allow only the server).
linux:
	pwd: get current path
Move file:
	scp -i keypair.pem docker-compose.yaml ec2-user@ec2-100-29-10-87.compute-1.amazonaws.com:/
Install
	docker:
		sudo yum install docker
		sudo usermod -aG docker ec2-user
		sudo service docker start
	docker-compose:
		sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
		sudo chmod +x /usr/local/bin/docker-compose
		docker-compose --version
Pull images:
	First add AWS configure, AWS configure set aws_session_token
	aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 151465357300.dkr.ecr.us-east-1.amazonaws.com


#Jpa batch inserts
- Create a sequence on Mysql.
- Use @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "seq_generator") Instead of IDENTITY
- Config:
   + spring.jpa.properties.hibernate.generate_statistics=true
   + spring.jpa.properties.hibernate.jdbc.batch_size=50
   + spring.jpa.properties.hibernate.order_inserts=true
   + spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true


HTTP - SSL - HTTPS: Running docker inside EC2. allow SSL
   Pre: EC2 is installed nginx
   CMD: sudo yum install certbot python2-certbot-nginx -y
   CMD: sudo vi /etc/nginx/conf.d/frontend.conf
   Then paste the config for nginx.
        server {
            listen 80;
            server_name binhhv.click www.binhhv.click;

            # Redirect all HTTP requests to HTTPS
            location / {
                return 301 https://$host$request_uri;
            }
        }

        server {
            listen 443 ssl;
            server_name binhhv.click www.binhhv.click;

            ssl_certificate /etc/letsencrypt/live/binhhv.click/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/binhhv.click/privkey.pem;

            ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
            ssl_ciphers HIGH:!aNULL:!MD5;
            ssl_prefer_server_ciphers on;

            location / {
                proxy_pass http://localhost:4200;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            # Backend
            location /api/ {
                proxy_pass http://localhost:8080/api/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
   CMD: sudo nginx -t
   CMD: sudo systemctl restart nginx
   CMD: sudo certbot --nginx
   CMD: docker-compose up


