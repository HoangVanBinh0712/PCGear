Description: >
  Demo Deploy Java App with ECS.
Parameters:
  ProjectName:
    Description: An environment name that will be prefixed to resources.
    Type: String

  VpcCIDR:
    Description: Please enter the IP range
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: IP range in CIDR notation for the public subnet in the first Availability Zone
    Type: String

  PublicSubnet2CIDR:
    Description: IP range in CIDR notation for the public subnet in the second Availability Zone
    Type: String

  AppName:
    Description: Application name
    Type: String
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref ProjectName

  MyInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ProjectName

  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-2

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref MyInternetGateway

  SubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  ECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for ECS tasks"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !GetAtt LBSecurityGroup.GroupId
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"
  LBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for Loadbalancer"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"
  TaskPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref ECSRole
        - !Ref ECSTaskExecutionRole
      PolicyName: AmazonEC2ContainerRegistryReadOnly
      PolicyDocument:  {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecr:GetAuthorizationToken",
              "ecr:BatchCheckLayerAvailability",
              "ecr:GetDownloadUrlForLayer",
              "ecr:GetRepositoryPolicy",
              "ecr:DescribeRepositories",
              "ecr:ListImages",
              "ecr:DescribeImages",
              "ecr:BatchGetImage",
              "ecr:GetLifecyclePolicy",
              "ecr:GetLifecyclePolicyPreview",
              "ecr:ListTagsForResource",
              "ecr:DescribeImageScanFindings",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          }
        ]
      }

  ECSRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"


Outputs:
  VPC:
    Description: "VPC"
    Value: !Ref VPC
    Export:
      Name: !Sub ${ProjectName}-VPC

  PublicSubnet1:
    Description: "PublicSubnet1"
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${ProjectName}-PublicSubnet1

  PublicSubnet2:
    Description: "PublicSubnet2"
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${ProjectName}-PublicSubnet2

  ECSSecurityGroup:
    Description: "ECSSecurityGroup"
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Sub ${ProjectName}-ECSSecurityGroup

  LBSecurityGroup:
    Description: "LBSecurityGroup"
    Value: !Ref LBSecurityGroup
    Export:
      Name: !Sub ${ProjectName}-LBSecurityGroup

  ECSTaskExecutionRoleArn:
    Description: "ECSTaskExecutionRoleArn"
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub ${ProjectName}-ECSTaskExecutionRoleArn